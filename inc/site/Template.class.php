<?php
class Template {
	public $template;
	private $templateText = "default";
	private $home;
	public $menu;
	public $hasLeftSidebar;
	public $hasRightSidebar;
	private $includes = array();
	public $hasSkipNav = true;
	private $gridWidth = 12;
	private $sidebarWidth = 2;
	
	
	public function __construct($menu, $templateText="default") {
		global $site;
		$this->templateText = $templateText;
		// echo 'um'.$templateText;
		if ($this->templateText == "none") return;
		include_once($site['incroot']."/site/templates/".$this->templateText.".class.php");
		$this->template = new TemplateInstance($this) or die("???");
		$this->menu = $menu;

		$this->hasLeftSidebar = $this->hasSidebar('left');
		$this->hasRightSidebar = $this->hasSidebar('right');
	}
	
	public function head() {
	  if ($this->templateText == "none") return;
	  global $h, $site;
	  ////Add scripts/styles from jsModules
	  $jsMods = new JsModule();
	  foreach ($jsMods->jquery as $script) {
	  	$this->includes[] = $script;
	  }
	  foreach ($site['jsModules'] as $module => $bool) {
		  if ($bool) {
			  	$mod = $jsMods->modules[$module];
		  		$this->includes = array_merge($this->includes, $mod['scripts'], $mod['styles']);
		  }
	  }
	  $this->includes = array_merge($this->includes, $this->template->scripts, $this->template->stylesheets);
 	  ////Add scripts/sheets from $GLOBALS
	  $this->includes = array_merge($this->includes, $site['scripts'], $site['stylesheets']);
	  ////HTML/head
	  $title = $site['siteName'];
	  if ($site['pageTitle'] != "") {
		$title .= ': '. $site['pageTitle'];
	  }
	  $h->ohtml($title, $this->includes, $site['meta']);
	  if (isset($site['headerExtra'])) {
		$h->tnl($site['headerExtra']);  
	  }
	  $h->script('var webroot = "'.$site['webroot'].'";');
	  $h->body($this->template->bodyAtts);
	  if ($this->hasSkipNav) $this->skipNav();		
	}

	public function openLayout() {
		global $h, $site;
		////Site structure
		$h->odiv(['id' => 'layout', 'class' => 'row']);
		$contentWidth = $this->gridWidth;
		if ($this->hasLeftSidebar && $this->hasRightSidebar) {
			$contentWidth -= 2 * $this->sidebarWidth;
			$this->leftSideBar();
		} else if ($this->hasLeftSidebar) {
			$contentWidth -= $this->sidebarWidth;
			$this->leftSideBar();
		} else if ($this->hasRightSidebar) {
			$contentWidth -= $this->sidebarWidth;
		}
		$h->odiv('id="content-wrapper" class="col-md-'.$contentWidth.'"');
		$h->odiv('id="content"');
	}

	function closeLayout() {
		global $h, $site;		
		$h->cdiv('/#content');	////close content
		$h->cdiv('/#content-wrapper');	//close content-wrapper
		if ($site['rightSideBar'] != "none") {
			$this->rightSideBar();
		}
		$h->cdiv('./row');	//close layout
	}
	
	
	////For accessibility
	public function skipNav() {
	  global $h, $site;
	  ////link array. ids generated by lowercasing and replacing spaces with hyphens
	  $links = array(
	  	array("display" => "Content"),
		array("display" => "Search"),
		array("display" => "Primary Navigation")
	  );
	  if ($this->hasLeftSidebar) {
		$links[] = 	array("display" => "Secondary Navigation");
	  }
	  ////generate href ids
	  for ($i = 0; $i < count($links); $i++) {
		$links[$i]['href'] = '#'.strtolower(str_replace(" ", "-", $links[$i]['display']));
	  }
	  ////Render
	  $h->odiv('id="skip" class="hide"');
	  $h->p("Skip to:");
	  $h->linkList($links);
	  $h->cdiv();		

	}
	////Website header
	public function heading() {
		if ($this->templateText == "none") return;		
		$this->template->heading();	
	}
	
	////Left side bar
	public function leftSideBar($type=null, $args=null) {
		global $h, $site;
		$type = $type ? $type : $site['leftSideBar']['type'];
		$args = $args ? $args : $site['leftSideBar']['args'];
		$h->odiv(['class' => 'sidebar col-md-'.$this->sidebarWidth]);
		switch ($type) {
			case "content":
				$h->tnl($args['content']);
				break;
			case 'menu':
				$path = $site['path'];				
				if (array_key_exists('path', $args)) {
					$path = $args['path'];
				}
				$path = preg_replace('/\/[a-z0-9A-Z\-_]+\.php$/', '/', $path);
				$xml = $this->menu->getNodeFromPath(array('path'=>$path));
				$array = $this->menu->xmlMenu2array(array('xml'=>$xml, 'root'=>$path));
		//		$h->pa($array);
				$h->linkList($array, 'class="tree" id="lsb-menu"');
				break;
			default:
				$h->tnl("Unsupported sidebar type");
		}
		$h->cdiv('/left sidebar'); //close column 1
				
	}

	public function rightSideBar() {
		global $h;
		$h->odiv('id="column3"');
		$h->tnl($site['rightSideBar']);
		$h->cdiv('/right sidebar'); //close column 3
	}
	
	public function breadcrumbs($opts=array()) {
	  global $h;
	  $this->menu->renderBreadcrumbs($opts);
	}
	
	public function footer() {
		if ($this->templateText == "none") return;		
		$this->template->footer();	
	}

	private function hasSidebar($side) {
		global $site;
		$sidebar = $site[$side.'SideBar'];
		$type = is_array($sidebar) ? $sidebar['type'] : $sidebar;
		return $type !== "none";
	}
}